{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Desktop\\\\H2H\\\\Summer_Internship_UI\\\\Summer_Internship_UI\\\\src\\\\components\\\\table2.jsx\";\nimport * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nvar columns = [{\n  title: \"id\",\n  field: \"id\",\n  hidden: true\n}, {\n  title: \"First name\",\n  field: \"first_name\"\n}, {\n  title: \"Last name\",\n  field: \"last_name\"\n}, {\n  title: \"email\",\n  field: \"email\"\n}];\nconst [data, setData] = useState([]); //table data\n//for error handling\n// const [iserror, setIserror] = useState(false)\n// const [errorMessages, setErrorMessages] = useState([])\n\nuseEffect(() => {\n  api.get(\"./columns\").then(res => {\n    setData(res.data.data);\n  }).catch(error => {\n    setErrorMessage([\"Cannot load user data\"]);\n    setIserror(true);\n  });\n}, []);\nexport default function DataTable() {\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    title: \"User list from API\",\n    columns: columns,\n    data: data,\n    icons: tableIcons,\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        handleRowUpdate(newData, oldData, resolve);\n      }),\n      onRowAdd: newData => new Promise(resolve => {\n        handleRowAdd(newData, resolve);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        handleRowDelete(oldData, resolve);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 1\n  }, this);\n}\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["C:/Users/KIIT/Desktop/H2H/Summer_Internship_UI/Summer_Internship_UI/src/components/table2.jsx"],"names":["React","DataGrid","columns","title","field","hidden","data","setData","useState","useEffect","api","get","then","res","catch","error","setErrorMessage","setIserror","DataTable","tableIcons","onRowUpdate","newData","oldData","Promise","resolve","handleRowUpdate","onRowAdd","handleRowAdd","onRowDelete","handleRowDelete"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAAkD;AAGlD,IAAIC,OAAO,GAAG,CACV;AAACC,EAAAA,KAAK,EAAE,IAAR;AAAcC,EAAAA,KAAK,EAAE,IAArB;AAA2BC,EAAAA,MAAM,EAAE;AAAnC,CADU,EAEV;AAACF,EAAAA,KAAK,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE;AAA7B,CAFU,EAGV;AAACD,EAAAA,KAAK,EAAE,WAAR;AAAqBC,EAAAA,KAAK,EAAE;AAA5B,CAHU,EAIV;AAACD,EAAAA,KAAK,EAAE,OAAR;AAAiBC,EAAAA,KAAK,EAAE;AAAxB,CAJU,CAAd;AAMI,MAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC,EAAD,CAAhC,C,CAAsC;AACtC;AACA;AACA;;AAGAC,SAAS,CAAC,MAAM;AACZC,EAAAA,GAAG,CAACC,GAAJ,CAAQ,WAAR,EACGC,IADH,CACQC,GAAG,IAAI;AACXN,IAAAA,OAAO,CAACM,GAAG,CAACP,IAAJ,CAASA,IAAV,CAAP;AACD,GAHH,EAIGQ,KAJH,CAISC,KAAK,IAAE;AACZC,IAAAA,eAAe,CAAC,CAAC,uBAAD,CAAD,CAAf;AACAC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAPH;AAQD,CATM,EASJ,EATI,CAAT;AAUJ,eAAe,SAASC,SAAT,GAAqB;AAClC,sBACF,QAAC,aAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,OAAO,EAAEhB,OAFX;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,KAAK,EAAEa,UAJT;AAKE,IAAA,QAAQ,EAAE;AACRC,MAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBC,QAAAA,eAAe,CAACJ,OAAD,EAAUC,OAAV,EAAmBE,OAAnB,CAAf;AACL,OAFG,CAFM;AAKVE,MAAAA,QAAQ,EAAGL,OAAD,IACR,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AACvBG,QAAAA,YAAY,CAACN,OAAD,EAAUG,OAAV,CAAZ;AACD,OAFD,CANQ;AASVI,MAAAA,WAAW,EAAGN,OAAD,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBK,QAAAA,eAAe,CAACP,OAAD,EAAUE,OAAV,CAAf;AACD,OAFD;AAVQ;AALZ;AAAA;AAAA;AAAA;AAAA,UADE;AAsBD;KAvBuBN,S","sourcesContent":["import * as React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';;\r\n\r\n\r\nvar columns = [\r\n    {title: \"id\", field: \"id\", hidden: true},\r\n    {title: \"First name\", field: \"first_name\"},\r\n    {title: \"Last name\", field: \"last_name\"},\r\n    {title: \"email\", field: \"email\"}\r\n    ]; \r\n    const [data, setData] = useState([]); //table data\r\n    //for error handling\r\n    // const [iserror, setIserror] = useState(false)\r\n    // const [errorMessages, setErrorMessages] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        api.get(\"./columns\")\r\n          .then(res => {\r\n            setData(res.data.data)\r\n          })\r\n          .catch(error=>{\r\n            setErrorMessage([\"Cannot load user data\"])\r\n            setIserror(true)\r\n          })\r\n      }, [])\r\nexport default function DataTable() {\r\n  return (\r\n<MaterialTable\r\n  title=\"User list from API\"\r\n  columns={columns}\r\n  data={data}\r\n  icons={tableIcons}\r\n  editable={{\r\n    onRowUpdate: (newData, oldData) =>\r\n      new Promise((resolve) => {\r\n        handleRowUpdate(newData, oldData, resolve);\r\n  }),\r\n  onRowAdd: (newData) =>\r\n    new Promise((resolve) => {\r\n      handleRowAdd(newData, resolve)\r\n    }),\r\n  onRowDelete: (oldData) =>\r\n    new Promise((resolve) => {\r\n      handleRowDelete(oldData, resolve)\r\n    }),\r\n  }}\r\n/>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}